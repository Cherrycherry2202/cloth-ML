import tensorflow as tf
import tensorflow_datasets as tfds
import math
import numpy as np
import matplotlib.pyplot as plt
dataset,metadata= tfds.load('fashion_mnist',as_supervised= True,with_info=True)
train_dataset, test_dataset= dataset['train'], dataset['test']
class_names= metadata.features['label'].names
print("class name:{}".format(class_names))
num_train_examples=metadata.splits['train'].num_examples
num_test_examples=metadata.splits['test'].num_examples
def normalize(images, labels):
  images=tf.cast(images,tf.float32)
  images/=225
  return images,labels
  for image,label in train_dataset.take(1):
  break
image=image.numpy().reshape((28,28))
model =tf.keras.Sequential([
                            tf.keras.layers.Flatten(input_shape=(28,28,1)),
                            tf.keras.layers.Dense(100,activation=tf.nn.relu),
                            tf.keras.layers.Dense(10,activation=tf.nn.softmax)
])
model.compile(optimizer='adam', loss=tf.keras.losses.SparseCategoricalCrossentropy(),metrics=['accuracy'])
BATCH_SIZE=32
train_dataset = train_dataset.cache().repeat().shuffle(num_train_examples).batch(BATCH_SIZE)
test_dataset = test_dataset.cache().batch(BATCH_SIZE)
model.fit(train_dataset,epochs=10,steps_per_epoch=math.ceil(num_train_examples/BATCH_SIZE))
test_loss,test_accuracy= model.evaluate(test_dataset,steps=math.ceil(num_test_examples/32))
print('Accuracy on test dataset:', test_accuracy)
